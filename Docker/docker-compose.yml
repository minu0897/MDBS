services:
  api:
    build:
      context: ..
      dockerfile: Docker/dockerfile
      target: prod
    env_file: ../BE/.env.server
    environment:
      - DOCKER_SOCK=unix:///var/run/docker.sock
      - STATS_POLL_SEC=2
    group_add:
      - "124"  
    ports:
      - "5000:5000"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    depends_on:
      - mysql
      - postgres
      - mongo
      - oracle

  # MongoDB
  mongo:
    image: mongo:6.0
    container_name: mongo
    restart: always
    ports:
      - "27017:27017"                 # 보안상 필요 없으면 127.0.0.1:27017:27017 권장
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: rootpass
    volumes:
      - mongo_data:/data/db

  # MySQL
  mysql:
    image: mysql:8.0
    container_name: mysql
    restart: always
    ports:
      - "3306:3306"                   # 보안상 필요 없으면 127.0.0.1:3306:3306 권장
    environment:
      MYSQL_ROOT_PASSWORD: rootpass
      MYSQL_DATABASE: testdb
      MYSQL_USER: testuser
      MYSQL_PASSWORD: testpass
    command: --default-authentication-plugin=mysql_native_password
    volumes:
      - mysql_data:/var/lib/mysql

  # Oracle XE
  oracle:
    image: gvenzl/oracle-xe:21-slim
    container_name: oracle
    restart: always
    ports:
      - "1521:1521"
      - "5500:5500"
    environment:
      ORACLE_PASSWORD: rootpass
      APP_USER: testuser
      APP_USER_PASSWORD: testpass
    volumes:
      - oracle_data:/opt/oracle/oradata

  # PostgreSQL
  postgres:
    image: postgres:15
    container_name: postgres
    restart: always
    ports:
      - "3001:5432"                   # 호스트 3001 → 컨테이너 5432
    environment:
      POSTGRES_USER: testuser
      POSTGRES_PASSWORD: testpass
      POSTGRES_DB: testdb
    volumes:
      - postgres_data:/var/lib/postgresql/data

volumes:
  mongo_data:
  mysql_data:
  oracle_data:
  postgres_data:
